name: Azure Function App Dev Deployment

on:
  push:
    branches:
      - development
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: az-tw-website-dev
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: development
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Resolve Project Dependencies Using Dotnet'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        dotnet build --configuration Release --output ./output
        popd

    - name: 'Run Unit Tests'
      shell: bash
      run: |
        dotnet test

    - name: 'Deploy to Azure Function App'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

    - name: 'Configure Managed Identity and RBAC'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Get the Function App's managed identity
          identity=$(az functionapp identity assign \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query principalId --output tsv)

          # Assign RBAC roles to the Function App's managed identity for storage
          az role assignment create \
            --assignee $identity \
            --role "Storage Blob Data Contributor" \
            --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/az-tw-website-storage/providers/Microsoft.Storage/storageAccounts/aztwwebsitestorage"

          az role assignment create \
            --assignee $identity \
            --role "Storage Table Data Contributor" \
            --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/az-tw-website-storage/providers/Microsoft.Storage/storageAccounts/aztwwebsitestorage"

    - name: 'Configure App Settings'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az functionapp config appsettings set \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --settings \
              "BlogStorageUrl=https://${{ secrets.STORAGE_ACCOUNT_NAME }}.blob.core.windows.net" \
              "StorageTableEndpoint=https://${{ secrets.STORAGE_ACCOUNT_NAME }}.table.core.windows.net" \
              "BlogTableName=mockblog" \
              "BlogCommentsTableName=mockblogcomments" \
              "BlogImagesContainer=mock-blog-images" \
              "AZURE_FUNCTIONS_ENVIRONMENT=Development" \
              "APPINSIGHTS_INSTRUMENTATIONKEY=${{ secrets.APPINSIGHTS_INSTRUMENTATIONKEY }}"

    - name: 'Wait for Deployment Stabilization'
      run: sleep 30

    - name: 'Run Smoke Tests'
      id: smoke_tests
      shell: bash
      env:
        MAX_RESPONSE_TIME: 5000  # More lenient timeout for development
        FUNCTION_APP_URL: https://az-tw-website-dev.azurewebsites.net
      run: |
        # Function to test endpoint with retries
        test_endpoint() {
          local endpoint=$1
          local name=$2
          local max_retries=${3:-3}
          local timeout=${4:-30}
          
          echo "::group::Testing $name endpoint"
          
          for i in $(seq 1 $max_retries); do
            echo "Attempt $i of $max_retries..."
            
            # Full response with headers for debugging
            echo "Detailed curl output:"
            response=$(curl -v -s -w "\n%{http_code}\n%{time_total}" "$FUNCTION_APP_URL$endpoint" 2>&1)
            echo "$response"
            
            status_code=$(echo "$response" | tail -n2 | head -n1)
            response_time=$(echo "$response" | tail -n1)
            response_time_ms=$(echo "$response_time * 1000" | bc)
            
            echo "Status Code: $status_code"
            echo "Response Time: ${response_time_ms}ms"
            
            # Check for success or acceptable status
            if [ "$status_code" = "200" ] || [ "$status_code" = "404" ]; then
              # Performance warning for development feedback
              if [ $(echo "$response_time_ms > $MAX_RESPONSE_TIME" | bc) -eq 1 ]; then
                echo "::warning::$name response time (${response_time_ms}ms) exceeded threshold (${MAX_RESPONSE_TIME}ms)"
              fi
              echo "::endgroup::"
              return 0
            fi
            
            if [ $i -lt $max_retries ]; then
              echo "Retrying in 5 seconds..."
              sleep 5
            fi
          done
          
          echo "::error::$name endpoint failed after $max_retries attempts. Last status: $status_code"
          echo "::endgroup::"
          return 1
        }
        
        # Execute tests with the helper function
        echo "Starting endpoint tests..."
        
        # Test Blog Posts endpoint
        if ! test_endpoint "/api/blog/posts" "Blog Posts"; then
          exit 1
        fi
        
        # Test Blog Images endpoint
        if ! test_endpoint "/api/blog/images/test-image" "Blog Images" 5; then
          exit 1
        fi
        
        echo "::notice::All smoke tests passed successfully!"