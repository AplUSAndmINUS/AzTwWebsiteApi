name: Azure Function App Dev Deployment

on:
  push:
    branches:
      - development
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './src/Functions'
  OUTPUT_PATH: './output'
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Build and Publish Functions'
      shell: bash
      env:
        FUNCTIONS_WORKER_RUNTIME: "dotnet-isolated"
        DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: 1
      run: |
        # Clean output directory
        rm -rf ./output
        mkdir -p ./output

        # Build solution
        echo "üî® Building solution..."
        dotnet restore AzTwWebsiteApi.sln
        dotnet clean AzTwWebsiteApi.sln --configuration Release
        dotnet build AzTwWebsiteApi.sln --configuration Release

        # Publish functions
        echo "üì¶ Publishing functions..."
        dotnet publish src/Functions/Blog/BlogFunctions.csproj \
          --configuration Release \
          --output ./output \
          --runtime linux-x64 \
          --self-contained false \
          -p:PublishReadyToRun=false \
          -p:GenerateRuntimeConfigurationFiles=true \
          -p:UseAppHost=false

        # Create deployment package
        echo "üì¶ Creating deployment package..."
        cd ./output
        zip -r ../function-app.zip ./*
        cd ..

    - name: 'Configure Function App Settings'
      shell: bash
      run: |
        echo "‚öôÔ∏è Configuring Function App settings..."
        
        # Set content share name based on function app name
        CONTENT_SHARE="${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }}-content"

        # Configure application settings
        az functionapp config appsettings set \
          --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
          --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
          --settings \
            FUNCTIONS_EXTENSION_VERSION="~4" \
            FUNCTIONS_WORKER_RUNTIME="dotnet-isolated" \
            WEBSITE_RUN_FROM_PACKAGE="1" \
            SCM_DO_BUILD_DURING_DEPLOYMENT="false" \
            ENABLE_ORYX_BUILD="false" \
            WEBSITE_USE_PLACEHOLDER_DOTNETISOLATED="1" \
            AzureWebJobsStorage="${{ secrets.STORAGE_CONNECTION_STRING }}" \
            WEBSITE_CONTENTAZUREFILECONNECTIONSTRING="${{ secrets.STORAGE_CONNECTION_STRING }}" \
            WEBSITE_CONTENTSHARE="$CONTENT_SHARE" \
            StorageAccountName="${{ vars.STORAGE_ACCOUNT_NAME }}"

    - name: 'Deploy to Azure Function App'
      uses: Azure/functions-action@v1
      id: deploy
      with:
        app-name: ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }}
        package: ./function-app.zip
        respect-funcignore: true
        scm-do-build-during-deployment: false
        enable-oryx-build: false

    - name: 'Verify Deployment'
      if: always()
      shell: bash
      run: |
        echo "‚è≥ Waiting for deployment to stabilize..."
        sleep 30

        # First verify the function app is running
        echo "üîç Checking Function App status..."
        function_status=$(az functionapp show \
          --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
          --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
          --query "state" -o tsv)

        if [[ "$function_status" != "Running" ]]; then
          echo "‚ùå Function App is not in Running state. Current state: $function_status"
          exit 1
        fi

        echo "‚úÖ Function App is running"

        # Check deployment status using webapp deployment source
        echo "üìã Checking deployment status..."
        deployment_info=$(az webapp deployment source show \
          --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
          --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
          -o json)

        # Extract status using jq
        deployment_status=$(echo "$deployment_info" | jq -r .status)
        deployment_message=$(echo "$deployment_info" | jq -r .message)

        echo "Deployment Status: $deployment_status"
        echo "Deployment Message: $deployment_message"

        if [[ -z "$deployment_status" ]] || [[ "$deployment_status" == "null" ]]; then
          echo "‚ùå No deployment status found"
          echo "üìú Checking deployment logs..."
          az webapp log download \
            --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
            --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
            --log-file deployment.log
          
          if [ -f deployment.log ]; then
            echo "üìù Recent deployment logs:"
            tail -n 50 deployment.log
          fi
          exit 1
        fi

        # Verify function runtime configuration
        echo "üîç Verifying function runtime configuration..."
        runtime_config=$(az functionapp config show \
          --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
          --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
          --query "{linuxFxVersion:linuxFxVersion,netFrameworkVersion:netFrameworkVersion}" -o json)

        linux_fx_version=$(echo "$runtime_config" | jq -r .linuxFxVersion)
        net_framework_version=$(echo "$runtime_config" | jq -r .netFrameworkVersion)

        if [[ "$linux_fx_version" != "DOTNET-ISOLATED|8.0" ]]; then
          echo "‚ùå Incorrect Linux FX Version. Expected: DOTNET-ISOLATED|8.0, Got: $linux_fx_version"
          exit 1
        fi

        echo "‚úÖ Deployment verification successful!"
        echo "üìã Deployment Summary:"
        echo "- Function App State: $function_status"
        echo "- Deployment Status: $deployment_status"
        echo "- Runtime Version: $linux_fx_version"
        echo "- .NET Version: $net_framework_version"

    - name: 'Report Deployment Status'
      if: always()
      shell: bash
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment completed successfully"
        else
          echo "‚ùå Deployment failed"
          exit 1
        fi