name: Azure Function App Dev Deployment

on:
  push:
    branches:
      - development
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './src/Functions'
  OUTPUT_PATH: './output'
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://az-tw-website-dev.azurewebsites.net
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Build and Publish Functions'
      shell: bash
      env:
        FUNCTIONS_WORKER_RUNTIME: "dotnet-isolated"
        DOTNET_VERSION: "8.0"
      run: |
        # First restore solution dependencies
        dotnet restore
        
        # Build the shared project first
        dotnet build src/Shared/AzTwWebsiteApi.Shared.csproj --configuration Release
        
        # Create output directory
        mkdir -p ${{ env.OUTPUT_PATH }}
        
        # Build and publish each function project
        for func in ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/*; do
          if [ -f "$func/*.csproj" ]; then
            echo "Publishing function: $func"
            dotnet publish "$func" \
              --configuration Release \
              --output ${{ env.OUTPUT_PATH }} \
              -p:PublishReadyToRun=true \
              -p:FunctionWorkerRuntime=dotnet-isolated
          fi
        done
        
        # Copy host.json and other shared configs to output
        cp host.json ${{ env.OUTPUT_PATH }}/
        
        # Verify output contents
        echo "=== Build Output Contents ==="
        ls -la ${{ env.OUTPUT_PATH }}
        echo "=== host.json Contents ==="
        cat ${{ env.OUTPUT_PATH }}/host.json
        echo "=== Function DLLs ==="
        find ${{ env.OUTPUT_PATH }} -name "*.dll" -type f

    - name: 'Run Unit Tests'
      shell: bash
      run: |
        dotnet test

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: 'Configure Function App Settings'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Set general runtime settings
          az functionapp config appsettings set \
            --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
            --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
            --settings \
              "FUNCTIONS_WORKER_RUNTIME=dotnet-isolated" \
              "DOTNET_VERSION=8.0" \
              "AzureWebJobsFeatureFlags=EnableWorkerIndexing"

    - name: 'Enable Function App Logging'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Enable detailed logging
          az webapp log config \
            --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
            --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
            --detailed-error-messages true \
            --failed-request-tracing true \
            --web-server-logging filesystem

    - name: 'Deploy to Azure Function App'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }}
        package: ${{ env.OUTPUT_PATH }}
        respect-pom-xml: false
        scm-do-build-during-deployment: false

    - name: 'Check Function App Logs'
      if: always()
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "=== Fetching Application Logs ==="
          az webapp log download \
            --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
            --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
            --log-file logs.zip
          
          echo "=== Recent Logs ==="
          az webapp log tail \
            --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
            --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }}