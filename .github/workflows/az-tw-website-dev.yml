name: Azure Function App Dev Deployment

on:
  push:
    branches:
      - development
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './src/Functions'
  OUTPUT_PATH: './output'
  DOTNET_VERSION: '8.0.x'
  AZURE_FUNCTIONAPP_NAME_DEV: 'az-tw-website-dev'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Setup .NET'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Build and Publish Functions'
      shell: bash
      run: |
        # Clean output directory
        rm -rf ${{ env.OUTPUT_PATH }}
        mkdir -p ${{ env.OUTPUT_PATH }}
        
        # Build the function project first
        dotnet build ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/AzTwWebsiteApi.Functions.csproj \
          --configuration Release \
          -p:GenerateFunctionMetadata=true \
          -p:_FunctionsSkipCleanOutput=true

        # Then publish the project with explicit function generation
        dotnet publish ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/AzTwWebsiteApi.Functions.csproj \
          --configuration Release \
          --output ${{ env.OUTPUT_PATH }} \
          --runtime linux-x64 \
          --self-contained false \
          -p:PublishReadyToRun=false \
          -p:GenerateRuntimeConfigurationFiles=true \
          -p:UseAppHost=false \
          -p:GenerateFunctionMetadata=true \
          -p:_FunctionsSkipCleanOutput=true

        # Enhanced diagnostics for function.json files
        echo "==== Checking for generated function files in output directory ===="
        find ${{ env.OUTPUT_PATH }} -name "function.json" | sort
        
        # Generate more detailed output to diagnose issues
        echo "==== Directory structure of the published output ===="
        find ${{ env.OUTPUT_PATH }} -type f | grep -v "\.dll$\|\.pdb$" | sort
        
        # If no function.json files found, show what's happening
        if [ -z "$(find ${{ env.OUTPUT_PATH }} -name "function.json")" ]; then
          echo "==== WARNING: No function.json files found! Checking Function attributes in source code ===="
          grep -r "\[Function(" ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }} --include="*.cs" | head -20
          
          # Directly create function.json files here
          echo "==== Creating some function.json files manually ===="
          
          # Create a functions.json file at the root
          mkdir -p ${{ env.OUTPUT_PATH }}
          echo '{"disabled":false,"functions":["GetAllBlogPosts"]}' > ${{ env.OUTPUT_PATH }}/functions.json
          
          # Create GetAllBlogPosts function.json
          mkdir -p ${{ env.OUTPUT_PATH }}/GetAllBlogPosts
          echo '{"bindings":[{"authLevel":"anonymous","type":"httpTrigger","direction":"in","name":"req","methods":["get"],"route":"blog/posts"},{"type":"http","direction":"out","name":"$return"}],"scriptFile":"../AzTwWebsiteApi.Functions.dll","entryPoint":"AzTwWebsiteApi.Functions.BlogPostFunctions.GetAllBlogPosts"}' > ${{ env.OUTPUT_PATH }}/GetAllBlogPosts/function.json
          
          echo "==== Generated function.json files ===="
          find ${{ env.OUTPUT_PATH }} -name "function.json" | sort
        fi
        
        # Create deployment package
        cd ${{ env.OUTPUT_PATH }}
        
        # Verify what will be included in the zip
        echo "==== Files to be included in deployment package ===="
        find . -type f | sort
        
        # Ensure function.json files exist before creating the zip
        if [ -z "$(find . -name "function.json")" ]; then
          echo "ERROR: No function.json files found in output directory. Adding a minimal one for GetAllBlogPosts."
          # Create GetAllBlogPosts function.json as a last resort
          mkdir -p ./GetAllBlogPosts
          echo '{"bindings":[{"authLevel":"anonymous","type":"httpTrigger","direction":"in","name":"req","methods":["get"],"route":"blog/posts"},{"type":"http","direction":"out","name":"$return"}],"scriptFile":"../AzTwWebsiteApi.Functions.dll","entryPoint":"AzTwWebsiteApi.Functions.BlogPostFunctions.GetAllBlogPosts"}' > ./GetAllBlogPosts/function.json
        fi
        
        # Create the zip package
        zip -r ../function-app.zip ./*
        cd ..
        
        # Verify the contents of the zip file
        echo "==== Contents of the deployment package ===="
        unzip -l function-app.zip | grep function.json || echo "No function.json files found in zip!"

    - name: 'Login to Azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Update Function App Settings'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az functionapp config appsettings set --name ${{ env.AZURE_FUNCTIONAPP_NAME_DEV }} \
            --resource-group az-tw-website-functions \
            --settings \
              AzureWebJobsStorage="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
              StorageAccountName="aztwwebsitestorage" \
              BlogPostsTableName="mockblog" \
              BlogCommentsTableName="mockblogcomments" \
              BlogImagesContainerName="mock-blog-images" \
              FUNCTIONS_WORKER_RUNTIME="dotnet-isolated" \
              WEBSITE_CONTENTAZUREFILECONNECTIONSTRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
              WEBSITE_RUN_FROM_PACKAGE="1"

    - name: 'Deploy to Azure Function App'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_DEV }}
        package: './function-app.zip'
        respect-funcignore: true
        scm-do-build-during-deployment: false
        enable-oryx-build: false
    
    - name: 'Verify Function App Deployment'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "==== Checking deployed Azure Function App ===="
          echo "Function App status:"
          az functionapp show --name ${{ env.AZURE_FUNCTIONAPP_NAME_DEV }} \
            --resource-group az-tw-website-functions \
            --query "{State:state, DefaultHostName:defaultHostName, Runtime:siteConfig.linuxFxVersion}"
          
          echo "==== Functions list ===="
          az functionapp function list --name ${{ env.AZURE_FUNCTIONAPP_NAME_DEV }} \
            --resource-group az-tw-website-functions \
            --output table