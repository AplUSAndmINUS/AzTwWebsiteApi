name: Azure Function App Dev Deployment

on:
  push:
    branches:
      - development
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './src/Functions'
  OUTPUT_PATH: './output'
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Build and Publish Functions'
      shell: bash
      env:
        FUNCTIONS_WORKER_RUNTIME: "dotnet-isolated"
        DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: 1
      run: |
        # Clean output directory
        rm -rf ./output
        mkdir -p ./output

        # Build solution
        echo "üî® Building solution..."
        dotnet restore AzTwWebsiteApi.sln
        dotnet clean AzTwWebsiteApi.sln --configuration Release
        dotnet build AzTwWebsiteApi.sln --configuration Release
        
        # Publish functions
        echo "üì¶ Publishing functions..."
        dotnet publish src/Functions/Blog/BlogFunctions.csproj \
          --configuration Release \
          --output ./output \
          --runtime linux-x64 \
          --self-contained false \
          -p:PublishReadyToRun=false \
          -p:GenerateRuntimeConfigurationFiles=true \
          -p:UseAppHost=false
        
        # Ensure proper function app structure
        echo "ÔøΩ Setting up function app structure..."
        
        # Copy host.json
        cp src/Functions/Blog/host.json ./output/
        
        # Create minimal local.settings.json
        echo '{
          "IsEncrypted": false,
          "Values": {
            "FUNCTIONS_WORKER_RUNTIME": "dotnet-isolated",
            "AzureWebJobsStorage": "",
            "FUNCTIONS_EXTENSION_VERSION": "~4",
            "WEBSITE_RUN_FROM_PACKAGE": "1"
          }
        }' > ./output/local.settings.json
        
        # Create deployment package
        echo "üì¶ Creating deployment package..."
        cd ./output
        zip -r ../function-app.zip ./*
        cd ..
        
        echo "üì¶ Deployment package contents:"
        unzip -l function-app.zip

    - name: 'Pre-deployment Check'
      shell: bash
      run: |
        echo "üìù Checking Function App configuration..."
        az functionapp config show \
          --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
          --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
          --query "{runtime:linuxFxVersion,platform:use32BitWorkerProcess}"

        echo "üì¶ Verifying package contents..."
        ls -la ./output
        
        echo "üîß Checking host.json..."
        cat ./output/host.json

    - name: 'Configure Function App Settings'
      shell: bash
      run: |
        echo "‚öôÔ∏è Configuring Function App settings..."
        # First, ensure the function app is configured for Linux
        az functionapp update \
          --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
          --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
          --set kind=functionapp,linux

        # Now set the runtime version and other settings
        az functionapp config set \
          --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
          --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
          --net-framework-version "v8.0"

        # Configure application settings
        az functionapp config appsettings set \
          --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
          --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
          --settings \
            FUNCTIONS_WORKER_RUNTIME="dotnet-isolated" \
            WEBSITE_RUN_FROM_PACKAGE="1" \
            FUNCTIONS_EXTENSION_VERSION="~4" \
            DOTNET_ISOLATE_WORKER="1" \
            SCM_DO_BUILD_DURING_DEPLOYMENT="false" \
            ENABLE_ORYX_BUILD="false"

    - name: 'Deploy to Azure Function App'
      shell: bash
      run: |
        echo "üì§ Deploying function app package..."
        az functionapp deployment source config-zip \
          --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
          --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
          --src ./function-app.zip \
          --build-remote false \
          --verbose

    - name: 'Verify Deployment'
      if: always()
      shell: bash
      run: |
        echo "‚è≥ Waiting for deployment to stabilize..."
        sleep 30
        
        echo "üìã Checking deployment status..."
        az functionapp deployment source show \
          --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
          --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
          --query "{status:status,author:author,message:message,deployer:deployer}"

        echo "üîç Checking Function App status..."
        az functionapp show \
          --name ${{ vars.AZURE_FUNCTIONAPP_NAME_DEV }} \
          --resource-group ${{ vars.RESOURCE_GROUP_FUNCTIONS_NAME }} \
          --query "{State:state,DefaultHostName:defaultHostName,LastModified:lastModifiedTimeUtc,RuntimeVersion:siteConfig.netFrameworkVersion}"

    - name: 'Report Deployment Status'
      if: always()
      shell: bash
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment completed successfully"
        else
          echo "‚ùå Deployment failed"
          exit 1
        fi