name: Azure Function App Test Deployment

on:
  push:
    branches:
      - test
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: az-tw-website-tst
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: test
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Resolve Project Dependencies Using Dotnet'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        dotnet build --configuration Release --output ./output
        popd

    - name: 'Run Unit Tests'
      shell: bash
      run: |
        dotnet test

    - name: 'Deploy to Azure Function App Staging Slot'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
        slot-name: 'staging'

    - name: 'Configure Managed Identity and RBAC'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Get the Function App's managed identity
          identity=$(az functionapp identity assign \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query principalId --output tsv)

          # Assign RBAC roles to the Function App's managed identity for storage
          az role assignment create \
            --assignee $identity \
            --role "Storage Blob Data Contributor" \
            --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/az-tw-website-storage/providers/Microsoft.Storage/storageAccounts/aztwwebsitestorage"

          az role assignment create \
            --assignee $identity \
            --role "Storage Table Data Contributor" \
            --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/az-tw-website-storage/providers/Microsoft.Storage/storageAccounts/aztwwebsitestorage"

    - name: 'Configure App Settings'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az functionapp config appsettings set \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --settings \
              "BlogStorageUrl=https://aztwwebsitestorage.blob.core.windows.net" \
              "StorageTableEndpoint=https://aztwwebsitestorage.table.core.windows.net" \
              "BlogTableName=mockblog" \
              "BlogCommentsTableName=mockblogcomments" \
              "BlogImagesContainer=mock-blog-images" \
              "AZURE_FUNCTIONS_ENVIRONMENT=Test" \
              "APPINSIGHTS_INSTRUMENTATIONKEY=${{ secrets.APPINSIGHTS_INSTRUMENTATIONKEY }}"

    - name: 'Wait for Deployment Stabilization'
      run: sleep 30

    - name: 'Run Smoke Tests'
      id: smoke_tests
      shell: bash
      env:
        MAX_RESPONSE_TIME: 4000  # 4 seconds threshold for test environment
        FUNCTION_APP_URL: https://az-tw-website-tst.azurewebsites.net
      run: |
        # Helper function for endpoint testing
        test_endpoint() {
          local endpoint=$1
          local name=$2
          local validate_json=${3:-false}
          local max_retries=${4:-3}
          
          echo "::group::Testing $name endpoint"
          
          for i in $(seq 1 $max_retries); do
            echo "Attempt $i of $max_retries for $name..."
            
            response=$(curl -s -w "\n%{http_code}\n%{time_total}" "$FUNCTION_APP_URL$endpoint")
            status_code=$(echo "$response" | tail -n2 | head -n1)
            response_time=$(echo "$response" | tail -n1)
            response_time_ms=$(echo "$response_time * 1000" | bc)
            content=$(echo "$response" | head -n-2)
            
            echo "Status Code: $status_code"
            echo "Response Time: ${response_time_ms}ms"
            
            # Check for success conditions
            if [ "$status_code" = "200" ] || [ "$status_code" = "404" ]; then
              # Validate JSON if required
              if [ "$validate_json" = "true" ] && [ "$status_code" = "200" ]; then
                if ! echo "$content" | jq . >/dev/null 2>&1; then
                  echo "::error::$name endpoint returned invalid JSON"
                  echo "$content"
                  echo "::endgroup::"
                  return 1
                fi
                
                # For array responses, validate structure
                if [[ "$endpoint" == "/api/blog/posts" || "$endpoint" == "/api/events" ]]; then
                  if [ $(echo "$content" | jq 'if type=="array" then true else false end') != "true" ]; then
                    echo "::error::$name endpoint did not return an array"
                    echo "::endgroup::"
                    return 1
                  fi
                fi
              fi
              
              # Performance warning
              if [ $(echo "$response_time_ms > $MAX_RESPONSE_TIME" | bc) -eq 1 ]; then
                echo "::warning::$name response time (${response_time_ms}ms) exceeded threshold (${MAX_RESPONSE_TIME}ms)"
              fi
              
              echo "::endgroup::"
              return 0
            fi
            
            if [ $i -lt $max_retries ]; then
              echo "Retrying in 5 seconds..."
              sleep 5
            fi
          done
          
          echo "::error::$name endpoint failed after $max_retries attempts. Last status: $status_code"
          echo "::endgroup::"
          return 1
        }
        
        # Execute tests
        echo "Starting endpoint tests in staging environment..."
        
        # Test Blog Posts endpoint with JSON validation
        if ! test_endpoint "/api/blog/posts" "Blog Posts" true 3; then
          exit 1
        fi
        
        # Test Blog Images endpoint with extra retries
        if ! test_endpoint "/api/blog/images/test-image" "Blog Images" false 4; then
          exit 1
        fi
        
        # Test Events endpoint with JSON validation
        if ! test_endpoint "/api/events" "Events" true 3; then
          exit 1
        fi
        
        # Send results to App Insights
        echo "Logging test results to App Insights..."
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        curl -X POST \
          -H "Content-Type: application/json" \
          -H "x-api-key: ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}" \
          https://dc.services.visualstudio.com/v2/track \
          -d "{
            \"name\": \"Smoke Tests Results\",
            \"time\": \"$TIMESTAMP\",
            \"iKey\": \"${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}\",
            \"data\": {
              \"baseType\": \"CustomEvent\",
              \"baseData\": {
                \"ver\": \"2.0\",
                \"name\": \"StagingSmokeTestResults\",
                \"properties\": {
                  \"environment\": \"staging\",
                  \"slot\": \"staging\"
                }
              }
            }
          }"
        
        echo "::notice::All smoke tests passed successfully in staging environment!"

    - name: 'Swap Test Slot to Production'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az functionapp deployment slot swap \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --slot test \
            --target-slot production